using System.Diagnostics;

namespace _2022.Day10;

public class SolverTest : TestEngine<Solver, IEnumerable<Instruction>, int>
{
    private static readonly IEnumerable<Instruction> _instructions2 = new Instruction[]
    {
        new NoopInstruction(),
        new AddxInstruction(3),
        new AddxInstruction(-5),
    };

    private static readonly IEnumerable<Instruction> _instructions = new Instruction[]
    {
        new AddxInstruction(15),
        new AddxInstruction(-11),
        new AddxInstruction(6),
        new AddxInstruction(-3),
        new AddxInstruction(5),
        new AddxInstruction(-1),
        new AddxInstruction(-8),
        new AddxInstruction(13),
        new AddxInstruction(4),
        new NoopInstruction(),
        new AddxInstruction(-1),
        new AddxInstruction(5),
        new AddxInstruction(-1),
        new AddxInstruction(5),
        new AddxInstruction(-1),
        new AddxInstruction(5),
        new AddxInstruction(-1),
        new AddxInstruction(5),
        new AddxInstruction(-1),
        new AddxInstruction(-35),
        new AddxInstruction(1),
        new AddxInstruction(24),
        new AddxInstruction(-19),
        new AddxInstruction(1),
        new AddxInstruction(16),
        new AddxInstruction(-11),
        new NoopInstruction(),
        new NoopInstruction(),
        new AddxInstruction(21),
        new AddxInstruction(-15),
        new NoopInstruction(),
        new NoopInstruction(),
        new AddxInstruction(-3),
        new AddxInstruction(9),
        new AddxInstruction(1),
        new AddxInstruction(-3),
        new AddxInstruction(8),
        new AddxInstruction(1),
        new AddxInstruction(5),
        new NoopInstruction(),
        new NoopInstruction(),
        new NoopInstruction(),
        new NoopInstruction(),
        new NoopInstruction(),
        new AddxInstruction(-36),
        new NoopInstruction(),
        new AddxInstruction(1),
        new AddxInstruction(7),
        new NoopInstruction(),
        new NoopInstruction(),
        new NoopInstruction(),
        new AddxInstruction(2),
        new AddxInstruction(6),
        new NoopInstruction(),
        new NoopInstruction(),
        new NoopInstruction(),
        new NoopInstruction(),
        new NoopInstruction(),
        new AddxInstruction(1),
        new NoopInstruction(),
        new NoopInstruction(),
        new AddxInstruction(7),
        new AddxInstruction(1),
        new NoopInstruction(),
        new AddxInstruction(-13),
        new AddxInstruction(13),
        new AddxInstruction(7),
        new NoopInstruction(),
        new AddxInstruction(1),
        new AddxInstruction(-33),
        new NoopInstruction(),
        new NoopInstruction(),
        new NoopInstruction(),
        new AddxInstruction(2),
        new NoopInstruction(),
        new NoopInstruction(),
        new NoopInstruction(),
        new AddxInstruction(8),
        new NoopInstruction(),
        new AddxInstruction(-1),
        new AddxInstruction(2),
        new AddxInstruction(1),
        new NoopInstruction(),
        new AddxInstruction(17),
        new AddxInstruction(-9),
        new AddxInstruction(1),
        new AddxInstruction(1),
        new AddxInstruction(-3),
        new AddxInstruction(11),
        new NoopInstruction(),
        new NoopInstruction(),
        new AddxInstruction(1),
        new NoopInstruction(),
        new AddxInstruction(1),
        new NoopInstruction(),
        new NoopInstruction(),
        new AddxInstruction(-13),
        new AddxInstruction(-19),
        new AddxInstruction(1),
        new AddxInstruction(3),
        new AddxInstruction(26),
        new AddxInstruction(-30),
        new AddxInstruction(12),
        new AddxInstruction(-1),
        new AddxInstruction(3),
        new AddxInstruction(1),
        new NoopInstruction(),
        new NoopInstruction(),
        new NoopInstruction(),
        new AddxInstruction(-9),
        new AddxInstruction(18),
        new AddxInstruction(1),
        new AddxInstruction(2),
        new NoopInstruction(),
        new NoopInstruction(),
        new AddxInstruction(9),
        new NoopInstruction(),
        new NoopInstruction(),
        new NoopInstruction(),
        new AddxInstruction(-1),
        new AddxInstruction(2),
        new AddxInstruction(-37),
        new AddxInstruction(1),
        new AddxInstruction(3),
        new NoopInstruction(),
        new AddxInstruction(15),
        new AddxInstruction(-21),
        new AddxInstruction(22),
        new AddxInstruction(-6),
        new AddxInstruction(1),
        new NoopInstruction(),
        new AddxInstruction(2),
        new AddxInstruction(1),
        new NoopInstruction(),
        new AddxInstruction(-10),
        new NoopInstruction(),
        new NoopInstruction(),
        new AddxInstruction(20),
        new AddxInstruction(1),
        new AddxInstruction(2),
        new AddxInstruction(2),
        new AddxInstruction(-6),
        new AddxInstruction(-11),
        new NoopInstruction(),
        new NoopInstruction(),
        new NoopInstruction(),
    };

    public override Puzzle PartOne => new()
    {
        Example = new()
        {
            Input = Solver.WithCycles(_instructions),
            Result = 13140,
        },
        Solution = 13760,
    };

    public override Puzzle PartTwo => throw new NotImplementedException();
}
